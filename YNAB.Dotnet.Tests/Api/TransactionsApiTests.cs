/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using YNAB.Dotnet.Client;
using YNAB.Dotnet.Api;
using YNAB.Dotnet.Model;

namespace YNAB.Dotnet.Tests
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionsApiTests
    {
        private TransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionsApi
            //Assert.IsInstanceOfType(typeof(TransactionsApi), instance, "instance is a TransactionsApi");
        }

        
        /// <summary>
        /// Test CreateTransaction
        /// </summary>
        [Test]
        public void CreateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //SaveTransactionsWrapper saveTransactions = null;
            //var response = instance.CreateTransaction(budgetId, saveTransactions);
            //Assert.IsInstanceOf<SaveTransactionsResponse> (response, "response is SaveTransactionsResponse");
        }
        
        /// <summary>
        /// Test GetTransactionById
        /// </summary>
        [Test]
        public void GetTransactionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //Guid? transactionId = null;
            //var response = instance.GetTransactionById(budgetId, transactionId);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test GetTransactions
        /// </summary>
        [Test]
        public void GetTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //DateTime? sinceDate = null;
            //string type = null;
            //var response = instance.GetTransactions(budgetId, sinceDate, type);
            //Assert.IsInstanceOf<TransactionsResponse> (response, "response is TransactionsResponse");
        }
        
        /// <summary>
        /// Test GetTransactionsByAccount
        /// </summary>
        [Test]
        public void GetTransactionsByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //Guid? accountId = null;
            //DateTime? sinceDate = null;
            //string type = null;
            //var response = instance.GetTransactionsByAccount(budgetId, accountId, sinceDate, type);
            //Assert.IsInstanceOf<TransactionsResponse> (response, "response is TransactionsResponse");
        }
        
        /// <summary>
        /// Test GetTransactionsByCategory
        /// </summary>
        [Test]
        public void GetTransactionsByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //Guid? categoryId = null;
            //DateTime? sinceDate = null;
            //string type = null;
            //var response = instance.GetTransactionsByCategory(budgetId, categoryId, sinceDate, type);
            //Assert.IsInstanceOf<HybridTransactionsResponse> (response, "response is HybridTransactionsResponse");
        }
        
        /// <summary>
        /// Test GetTransactionsByPayee
        /// </summary>
        [Test]
        public void GetTransactionsByPayeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //Guid? payeeId = null;
            //DateTime? sinceDate = null;
            //string type = null;
            //var response = instance.GetTransactionsByPayee(budgetId, payeeId, sinceDate, type);
            //Assert.IsInstanceOf<HybridTransactionsResponse> (response, "response is HybridTransactionsResponse");
        }
        
        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Test]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? budgetId = null;
            //Guid? transactionId = null;
            //SaveTransactionWrapper transaction = null;
            //var response = instance.UpdateTransaction(budgetId, transactionId, transaction);
            //Assert.IsInstanceOf<TransactionResponse> (response, "response is TransactionResponse");
        }
        
    }

}
